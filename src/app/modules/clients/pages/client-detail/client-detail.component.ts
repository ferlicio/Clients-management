import { ChangeDetectorRef, Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { ActivatedRoute, NavigationEnd, Router } from '@angular/router';
import { ClientService } from '../../../../core/services/client.service';
import { filter, startWith, Subject, Subscription, takeUntil } from 'rxjs';
import { Client, ClientToCreate } from '../../../../shared/models/client';
import { DialogComponent } from '../../../../shared/components/dialog/dialog.component';
import { MatDialog } from '@angular/material/dialog';
import { DataValidationService } from '../../../../core/services/data-validation.service';

@Component({
  selector: 'app-client-detail',
  standalone: false,
  templateUrl: './client-detail.component.html',
  styleUrl: './client-detail.component.scss'
})
export class ClientDetailComponent implements OnInit {
  hasClient!: boolean;
  isEditing!: boolean;
  clientForm: FormGroup;
  currentUrl: string = '';
  currentClientId?: string;
  clientFormSubscription?: Subscription;
  private unsubscribe$ = new Subject<void>();


    constructor(
      public router: Router,
      private fb: FormBuilder,
      private clientService: ClientService,
      private dataValidationService: DataValidationService,
      private activatedRoute: ActivatedRoute,
      public dialog: MatDialog,
    ) {
      this.clientForm = this.fb.group({
        nome: ['', [Validators.required, Validators.minLength(2), Validators.maxLength(50)]],
        cpf: ['', Validators.required],
        dataNascimento: ['', Validators.required],
        rendaMensal: [0, Validators.required],
        email: ['', [Validators.required, Validators.email]],
        dataCadastro: ['', Validators.required],
      });
    }


  ngOnInit(): void {

    this.router.events.pipe(
      filter(event => event instanceof NavigationEnd),
      takeUntil(this.unsubscribe$),
      startWith(this.router.url)
    ).subscribe(() => {
      this.currentClientId = this.activatedRoute.snapshot.paramMap.get('id')?? undefined;

      this.currentUrl = this.router.url;
      this.hasClient = this.currentClientId != undefined && !this.currentUrl.includes('new');
      this.isEditing = this.currentUrl.includes('edit');
      this.initializeFormBasedOnRoute(this.currentClientId);
    });

    /* this.clientForm.valueChanges.pipe(
        takeUntil(this.unsubscribe$),
        debounceTime(1500)
      ).subscribe((value) => {
        console.log(value);
      }); */
  }

  initializeFormBasedOnRoute(clientId?:string): void {
    this.clientForm.reset({
      rendaMensal: 0
    });
    this.clientForm.enable();

    if (this.hasClient && clientId) { //se o usuário já existe e o ID é válido
      this.clientService.getClientById(clientId)
        .pipe(takeUntil(this.unsubscribe$))
        .subscribe({
          next: (cliente: Client) => {
            this.clientForm.patchValue(cliente);
            if (this.isEditing) { // se está editando, habilita o formulário
              this.clientForm.controls['dataCadastro'].disable();
              this.clientForm.controls['cpf'].disable();
              this.setValueChanges();
            } else {
              this.clientForm.disable();
            }
          },
          error: (err) => {
            this.dialog.open(DialogComponent, {
              data: {title: `Erro`, message: `Cliente não encontrado ou erro ao carregar dados: ${err.message}`}
            })
            this.router.navigate(['/clients/new']);
          }
        });
    } else if (!this.hasClient) { // se o usuário não existe, ou seja, é um novo cliente
      this.clientForm.patchValue({
        id: 'autogenerated',
        dataCadastro: new Date().toISOString()
      });
      this.isEditing = false;
      this.hasClient = false;
      this.clientForm.controls['dataCadastro'].disable();
      this.router.navigate(['/clients/new']);
    }
  }

  setValueChanges() {
    /* this.clientForm.valueChanges.pipe(
      takeUntil(this.unsubscribe$),
      debounceTime(3000)
    ).subscribe(() => {
      this.submitUser()
    }) */
  }

  submitUser(finished: boolean = false) {
    if (this.clientForm.invalid) {
      return;
    }

    let errors = this.validateFields();

    if (errors.length >= 1) {
      this.dialog.open(DialogComponent, {
      data: {title: `Erro de validação`, message: errors.join('<br/>')}
      });
      return;
    }
    console.log('Salvando...')
    console.log(this.clientForm.getRawValue())
    const clienteData = this.clientForm.getRawValue() as ClientToCreate;
    const userid = this.activatedRoute.snapshot.paramMap.get('id');

    if (this.isEditing) {
      if (!this.currentClientId || this.currentClientId!) {
        this.dialog.open(DialogComponent, {
          data: {title: `Erro`, message: `ID do cliente ausente ou inválido para edição.`}
        })
        return;
      }
      this.clientService.updateClient(clienteData).subscribe({
        next: () => {
          this.dialog.open(DialogComponent, {
            data: {title: `Sucesso`, message: `Cliente atualizado com sucesso!`}
          })
          if (finished) {
            this.isEditing = false;
            this.clientForm.disable();
            this.router.navigate(['/clients', userid]);
          }
        },
        error: (err) => this.dialog.open(DialogComponent, {
          data: {title: `Erro`, message: `Erro ao atualizar cliente: ${err.message}`}
        })
      })
    } else {
      this.clientService.createClient(clienteData).subscribe({
        next: (newUser) => {
          this.dialog.open(DialogComponent, {
            data: {title: `Sucesso`, message: `Cliente criado com sucesso!`}
          })
          this.hasClient = true;
          this.router.navigate(['/clients', newUser.id]);
        },
        error: (err) =>  this.dialog.open(DialogComponent, {
          data: {title: `Erro`, message: `Erro ao criar cliente: ${err.message}`}
        })
      })
    }
    this.unsubscribe$.next();
    this.unsubscribe$.complete();
  }

  validateFields(): string[] {
    const errors: string[] = [];
    const today = new Date();

    if ((this.clientForm.get('nome')?.value as string).split(' ').length < 2)
      errors.push('É necessário informar o nome completo do cliente.');

    if (this.dataValidationService.validateCPF(this.clientForm.get('cpf')?.value as string) === false)
      errors.push('CPF inválido. Por favor, verifique o número informado.');

    if ((new Date(this.clientForm.get('dataNascimento')?.value)) > new Date(
      today.getFullYear() - 18, today.getMonth(), today.getDate()
    ))
      errors.push('O cliente deve ter pelo menos 18 anos.');

    if ((new Date(this.clientForm.get('dataNascimento')?.value)) < new Date(
      today.getFullYear() - 60, today.getMonth(), today.getDate()
    ))
      errors.push('O cliente não pode ter mais de 60 anos.');

    if (this.clientForm.errors) 
      errors.push(Object.values(this.clientForm.errors).join(', '));

    return errors;
  }

  goBack() {
    if (this.isEditing) {
      this.dialog.open(DialogComponent, {
        data: {title: `Atenção`, message: `Você tem alterações não salvas. Deseja realmente sair?`}
      }).afterClosed().subscribe(result => {
        if (result) {
          this.router.navigate(['/clients']);
        }
      });
    } else {
      this.router.navigate(['/clients']);
    }
  }

   ngOnDestroy(): void {
    this.unsubscribe$.next();
    this.unsubscribe$.complete();
  }

}
